{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./authservice\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    return this.checkLoggedIn(state.url);\n  }\n  checkLoggedIn(url) {\n    if (this.authService.isLoggedIn()) {\n      return true;\n    }\n    this.authService.redirectToUrl = url;\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAClBC,YAAoBC,WAAuB,EAASC,MAAa;IAA7C,gBAAW,GAAXD,WAAW;IAAqB,WAAM,GAANC,MAAM;EAAS;EACrEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IACjE,OAAO,IAAI,CAACC,aAAa,CAACD,KAAK,CAACE,GAAG,CAAC;EAG1C;EACCD,aAAa,CAACC,GAAU;IACrB,IAAG,IAAI,CAACN,WAAW,CAACO,UAAU,EAAE,EAAC;MAC7B,OAAO,IAAI;;IAEf,IAAI,CAACP,WAAW,CAACQ,aAAa,GAACF,GAAG;IAClC,IAAI,CAACL,MAAM,CAACQ,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAChC,OAAO,KAAK;EACf;;AAdYX,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YAFP;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","route","state","checkLoggedIn","url","isLoggedIn","redirectToUrl","navigate","factory","providedIn"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\users\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { AuthService } from \"./authservice\";\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class AuthGuard implements CanActivate{\r\n    constructor(private authService:AuthService,private router:Router){}\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n      return this.checkLoggedIn(state.url);\r\n\r\n\r\n}\r\n checkLoggedIn(url:string):boolean{\r\n    if(this.authService.isLoggedIn()){\r\n        return true;\r\n    }\r\n    this.authService.redirectToUrl=url;\r\n    this.router.navigate(['/login']);\r\n    return false;\r\n }\r\n\r\n\r\n\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}