{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { tap, catchError, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ToDoService {\n  constructor(http) {\n    this.http = http;\n    this.url = '/api/todos';\n  }\n  getTodos() {\n    return this.http.get(this.url).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.errorHandler));\n  }\n  createTodo(todo) {\n    const headers = new HttpHeaders({\n      'Content-type': 'application/json'\n    });\n    return this.http.post(this.url, todo, {\n      headers\n    }).pipe(tap(data => console.log(data)), catchError(this.errorHandler));\n  }\n  errorHandler(err) {\n    let errorMessage;\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occured ${err.error.message}`;\n    } else {\n      errorMessage = `Backend returned code ${err.status} ${err.body.error}`;\n    }\n    console.log(err);\n    return throwError(errorMessage);\n  }\n}\nToDoService.ɵfac = function ToDoService_Factory(t) {\n  return new (t || ToDoService)(i0.ɵɵinject(i1.HttpClient));\n};\nToDoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ToDoService,\n  factory: ToDoService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAAqBC,GAAG,EAAEC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAO5D,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAEjB,QAAG,GAAC,YAAY;EAFc;EAIvCC,QAAQ;IACP,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAS,IAAI,CAACC,GAAG,CAAC,CAACC,IAAI,CAC1CT,GAAG,CAACU,IAAI,IAAEC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAAC,EAC5CT,UAAU,CAAC,IAAI,CAACc,YAAY,CAAC,CAC7B;EAEF;EACAC,UAAU,CAACC,IAAS;IAClB,MAAMC,OAAO,GAAG,IAAInB,WAAW,CAAC;MAAC,cAAc,EAAC;IAAkB,CAAC,CAAC;IAErE,OAAO,IAAI,CAACM,IAAI,CAACc,IAAI,CAAO,IAAI,CAACX,GAAG,EAACS,IAAI,EAAC;MAACC;IAAO,CAAC,CAAC,CACnDT,IAAI,CAACT,GAAG,CAACU,IAAI,IAAEC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,EAElCT,UAAU,CAAC,IAAI,CAACc,YAAY,CAAC,CAAC;EAE/B;EAEQA,YAAY,CAACK,GAAO;IAC1B,IAAIC,YAAoB;IACxB,IAAGD,GAAG,CAACE,KAAK,YAAYC,UAAU,EAAC;MACjCF,YAAY,GAAC,oBAAoBD,GAAG,CAACE,KAAK,CAACE,OAAO,EAAE;KACrD,MACG;MACFH,YAAY,GAAC,yBAAyBD,GAAG,CAACK,MAAM,IAAIL,GAAG,CAACM,IAAI,CAACJ,KAAK,EAAE;;IAEtEX,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC;IAChB,OAAOlB,UAAU,CAACmB,YAAY,CAAC;EACjC;;AAhCalB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAHX;AAAM","names":["HttpHeaders","tap","catchError","throwError","ToDoService","constructor","http","getTodos","get","url","pipe","data","console","log","JSON","stringify","errorHandler","createTodo","todo","headers","post","err","errorMessage","error","ErrorEvent","message","status","body","factory","providedIn"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\todo\\todo.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, tap, catchError, throwError } from \"rxjs\";\r\nimport { Todo } from \"./todo\";\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n  \r\n  })\r\n  export class ToDoService{\r\n    constructor(private http:HttpClient){}\r\n  \r\n    public url='/api/todos';\r\n  \r\n  getTodos():Observable<Todo[]>{\r\n   return this.http.get<Todo[]>(this.url).pipe(\r\n    tap(data=>console.log(JSON.stringify(data))),\r\n    catchError(this.errorHandler)\r\n   );\r\n  \r\n  }\r\n  createTodo(todo:Todo):Observable<Todo>{\r\n    const headers = new HttpHeaders({'Content-type':'application/json'});\r\n  \r\n   return this.http.post<Todo>(this.url,todo,{headers})\r\n   .pipe(tap(data=>console.log(data)),\r\n  \r\n   catchError(this.errorHandler));\r\n  \r\n  }\r\n  \r\n  private errorHandler(err:any){\r\n    let errorMessage :string;\r\n    if(err.error instanceof ErrorEvent){\r\n      errorMessage=`An error occured ${err.error.message}`;\r\n    }\r\n    else{\r\n      errorMessage=`Backend returned code ${err.status} ${err.body.error}`;\r\n    }\r\n    console.log(err);\r\n    return throwError(errorMessage);\r\n  }\r\n  }"]},"metadata":{},"sourceType":"module","externalDependencies":[]}