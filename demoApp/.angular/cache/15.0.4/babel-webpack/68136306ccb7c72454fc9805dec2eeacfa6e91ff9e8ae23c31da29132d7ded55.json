{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { addTodo, removeTodo, loadTodos, LoadTodoSuccess, LoadTodoFailure } from \"./todo.actions\";\nexport const initialState = {\n  todos: [],\n  error: '',\n  status: 'pending'\n};\nexport const todoReducer = createReducer(initialState, on(addTodo, (state, {\n  content\n}) => ({\n  ...state,\n  todos: [...state.todos, {\n    id: Date.now().toString(),\n    content: content\n  }]\n})), on(removeTodo, (state, {\n  id\n}) => ({\n  ...state,\n  todos: state.todos.filter(todo => todo.id !== id)\n})), on(loadTodos, state => ({\n  ...state,\n  status: 'loading'\n})), on(LoadTodoSuccess, (state, {\n  todos\n}) => ({\n  ...state,\n  todos,\n  error: '',\n  status: 'success'\n})), on(LoadTodoFailure, (state, {\n  error\n}) => ({\n  ...state,\n  error: error,\n  status: 'error'\n})));","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,SAASC,OAAO,EAAEC,UAAU,EAAEC,SAAS,EAAEC,eAAe,EAAEC,eAAe,QAAQ,gBAAgB;AAS/F,OAAO,MAAMC,YAAY,GAAc;EAEpCC,KAAK,EAAC,EAAE;EACRC,KAAK,EAAC,EAAE;EACRC,MAAM,EAAC;CAET;AAED,OAAO,MAAMC,WAAW,GAAGX,aAAa,CACxCO,YAAY,EACZN,EAAE,CAACC,OAAO,EAAC,CAACU,KAAK,EAAC;EAACC;AAAO,CAAC,MAAI;EAE3B,GAAGD,KAAK;EACRJ,KAAK,EAAC,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAC;IAACM,EAAE,EAACC,IAAI,CAACC,GAAG,EAAE,CAACC,QAAQ,EAAE;IAACJ,OAAO,EAACA;EAAO,CAAC;CACnE,CAAC,CAAC,EAEHZ,EAAE,CAACE,UAAU,EAAC,CAACS,KAAK,EAAC;EAACE;AAAE,CAAC,MAAI;EAC3B,GAAGF,KAAK;EACRJ,KAAK,EAACI,KAAK,CAACJ,KAAK,CAACU,MAAM,CAAEC,IAAI,IAAGA,IAAI,CAACL,EAAE,KAAKA,EAAE;CAChD,CAAC,CAAC,EAEHb,EAAE,CAACG,SAAS,EAAEQ,KAAK,KAAI;EACrB,GAAGA,KAAK;EACRF,MAAM,EAAC;CACR,CAAC,CAAC,EAEHT,EAAE,CAACI,eAAe,EAAC,CAACO,KAAK,EAAG;EAACJ;AAAK,CAAC,MAAI;EACrC,GAAGI,KAAK;EACRJ,KAAK;EACLC,KAAK,EAAC,EAAE;EACRC,MAAM,EAAC;CACR,CAAC,CAAC,EAEHT,EAAE,CAACK,eAAe,EAAC,CAACM,KAAK,EAAC;EAACH;AAAK,CAAC,MAAI;EACrC,GAAGG,KAAK;EACRH,KAAK,EAACA,KAAK;EACXC,MAAM,EAAC;CAEN,CAAC,CAAC,CAIF","names":["createReducer","on","addTodo","removeTodo","loadTodos","LoadTodoSuccess","LoadTodoFailure","initialState","todos","error","status","todoReducer","state","content","id","Date","now","toString","filter","todo"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\state\\todos\\todo.reducer.ts"],"sourcesContent":["import { createReducer, on } from \"@ngrx/store\";\r\nimport { Todo } from \"src/app/todo/todo\";\r\nimport { addTodo, removeTodo, loadTodos, LoadTodoSuccess, LoadTodoFailure } from \"./todo.actions\";\r\n\r\nexport  interface TodoState{\r\n    todos:Todo[];\r\n    error:string;\r\n    status:'pending' | 'loading' | 'error' |'success';\r\n  }\r\n  \r\n  \r\n  export const initialState :TodoState = {\r\n  \r\n     todos:[],\r\n     error:'',\r\n     status:'pending'\r\n  \r\n  }\r\n  \r\n  export const todoReducer = createReducer(\r\n  initialState,\r\n  on(addTodo,(state,{content})=>({\r\n  \r\n      ...state,\r\n      todos:[...state.todos,{id:Date.now().toString(),content:content}],\r\n  })),\r\n  \r\n  on(removeTodo,(state,{id})=>({\r\n    ...state,\r\n    todos:state.todos.filter((todo)=>todo.id !== id),\r\n  })),\r\n  \r\n  on(loadTodos,(state)=>({\r\n    ...state,\r\n    status:'loading'\r\n  })),\r\n  \r\n  on(LoadTodoSuccess,(state , {todos})=>({\r\n    ...state,\r\n    todos,\r\n    error:'',\r\n    status:'success'\r\n  })) ,\r\n  \r\n  on(LoadTodoFailure,(state,{error})=>({\r\n  ...state,\r\n  error:error,\r\n  status:'error'\r\n  \r\n  }))\r\n  \r\n  \r\n  \r\n  );"]},"metadata":{},"sourceType":"module","externalDependencies":[]}