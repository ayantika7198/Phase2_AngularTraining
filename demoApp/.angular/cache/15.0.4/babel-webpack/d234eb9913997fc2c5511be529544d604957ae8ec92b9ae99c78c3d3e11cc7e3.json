{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { mergeMap, map, catchError, of } from \"rxjs\";\nimport { loadTodos, LoadTodoSuccess, LoadTodoFailure } from \"./todo.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/todo/todo.service\";\nexport class TodoEffects {\n  constructor(actions$, todoService) {\n    this.actions$ = actions$;\n    this.todoService = todoService;\n    //when the loadtodos action is dispatched .,, this effect is run\n    this.loadTodos$ = createEffect(() => {\n      let err1;\n      return this.actions$.pipe(ofType(loadTodos),\n      //calls the service gettodos\n      mergeMap(() => this.todoService.getTodos()\n      //taking the returned value ,returns a new success action which contains the todos\n      .pipe(map(todos => LoadTodoSuccess({\n        todos\n      })), catchError(error => of(LoadTodoFailure({\n        error\n      }))))));\n    });\n  }\n}\nTodoEffects.ɵfac = function TodoEffects_Factory(t) {\n  return new (t || TodoEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ToDoService));\n};\nTodoEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TodoEffects,\n  factory: TodoEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,QAAQ,EAAEC,GAAG,EAAEC,UAAU,EAAEC,EAAE,QAAQ,MAAM;AAEpD,SAASC,SAAS,EAAEC,eAAe,EAAEC,eAAe,QAAQ,gBAAgB;;;;AAI5E,OAAM,MAAOC,WAAW;EAExBC,YAAoBC,QAAgB,EAASC,WAAuB;IAAhD,aAAQ,GAARD,QAAQ;IAAiB,gBAAW,GAAXC,WAAW;IACxD;IAEA,eAAU,GAAEZ,YAAY,CAAC,MAAI;MAC7B,IAAIa,IAAmB;MACrB,OAAO,IAAI,CAACF,QAAQ,CACnBG,IAAI,CACHb,MAAM,CAACK,SAAS,CAAC;MACjB;MACAJ,QAAQ,CAAC,MAAI,IAAI,CAACU,WAAW,CAACG,QAAQ;MACtC;MAAA,CACCD,IAAI,CAACX,GAAG,CAACa,KAAK,IAAET,eAAe,CAAC;QAACS;MAAK,CAAC,CAAC,CAAC,EAC1CZ,UAAU,CAACa,KAAK,IAAEZ,EAAE,CAACG,eAAe,CAAC;QAAES;MAAK,CAAE,CAAC,CAAC,CAAC,CAChD,CAAC,CACH;IAIH,CAAC,CAAC;EAlBoE;;AAFzDR,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAS,SAAXT,WAAW;AAAA","names":["createEffect","ofType","mergeMap","map","catchError","of","loadTodos","LoadTodoSuccess","LoadTodoFailure","TodoEffects","constructor","actions$","todoService","err1","pipe","getTodos","todos","error","factory"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\state\\todos\\todo.effects.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { mergeMap, map, catchError, of } from \"rxjs\";\r\nimport { ToDoService } from \"src/app/todo/todo.service\";\r\nimport { loadTodos, LoadTodoSuccess, LoadTodoFailure } from \"./todo.actions\";\r\n\r\n@Injectable()\r\n\r\nexport class TodoEffects{\r\n\r\nconstructor(private actions$:Actions,private todoService:ToDoService){}\r\n//when the loadtodos action is dispatched .,, this effect is run\r\n\r\nloadTodos$= createEffect(()=>{\r\nlet err1 : string | any;\r\n  return this.actions$\r\n  .pipe(\r\n    ofType(loadTodos),\r\n    //calls the service gettodos\r\n    mergeMap(()=>this.todoService.getTodos()\r\n    //taking the returned value ,returns a new success action which contains the todos\r\n    .pipe(map(todos=>LoadTodoSuccess({todos})),\r\n    catchError(error=>of(LoadTodoFailure({ error })))\r\n    ))\r\n  )\r\n\r\n\r\n\r\n})\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}