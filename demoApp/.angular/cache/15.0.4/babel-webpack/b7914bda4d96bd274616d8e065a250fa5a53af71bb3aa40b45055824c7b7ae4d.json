{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { BehaviorSubject, catchError, map, tap, throwError } from \"rxjs\";\nimport { Category } from \"src/app/products/product\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class productService {\n  //why are we passing http in the constructor as an argument\n  //what will angular do here\n  //angular will inject the httpclient dependency in productservice\n  //productservice needs to send http requests -- get post put delete\n  constructor(http) {\n    //we a re not writing any code\n    this.http = http;\n    this.foundIndex = 0;\n    //angular DI will resolve the dependency of ProductService class on HttpClient\n    //A -- B --C\n    //ProductListComponent it has a dependency mentioned in the constructors\n    //P roductService --constructor -- it says ProductService has  a dependency of type HttpClient\n    ///api/products --will be resolved from in-memory web api -- /api/products\n    this.url = \"api/products\";\n    this.products = [];\n    //why are we using BehaviorSubject\n    //BehaviorSubject is a subtype of Observable\n    //BehaviorSubject --it will emit only the last value of the source observable\n    //BehaviorSubject will ensure that every consumer get recent most value\n    //selection --selected object from the list of values\n    this.selectedProductSource = new BehaviorSubject(null);\n    //conventionally you can put $ to the var if it is a Observable\n    this.selectedProductChanges$ = this.selectedProductSource.asObservable();\n    //errorhandler which returns the Observable with errorMessage\n    this.errorHandler = err => {\n      let errorMessage;\n      //a client side error or network error then ErrorEvent object will be thrown\n      if (err.error instanceof ErrorEvent) {\n        errorMessage = `An error has occured ${err.error.message}`;\n      } else {\n        errorMessage = `Backend error code ${err.status} ${err.body.error}`;\n      }\n      console.log(err);\n      return throwError(errorMessage);\n    };\n    //what ever is in the request body, that is the object of IProduct\n    //http post request  with the request body and request headers -content type application/json\n    //url is the collection of events ==  /api/events\n    //what is the method name --createProduct\n    //args -- product of type IProduct\n    //return Observable<IProduct>\n    this.size = 1;\n  }\n  //retrieving all the products from api\n  //method name is getProducts( ) --no args\n  //what it is returning  ,what is the return type\n  //return type is mentioned after the method name and a colon\n  //return type  is Observable<IProduct[]>\n  getProducts() {\n    //what is the logic\n    //to get array of IProduct from db\n    //get method is a generic method IProduct[]\n    //arguments u are passing this.url api/products --- api\n    //pipe -- operator in rxjs  where you ca\n    return this.http.get(this.url).pipe(tap(data => {\n      console.log(data);\n      //we are assigning data to this.products\n      this.products = data;\n    }), catchError(this.errorHandler));\n  }\n  changeSelectedProduct(selectedProduct) {\n    this.selectedProductSource.next(selectedProduct);\n  }\n  // a method newProduct which acts like a constructor of creating a new Product\n  //what is name of the method -- newProduct\n  //how many args --zero args\n  //return type IProduct\n  newProduct() {\n    //logic should focus on sending back a IProduct\n    return {\n      id: 'P010',\n      name: '',\n      category: Category.jeans,\n      price: 0,\n      imageUrl: '\\\\assets\\\\images\\\\jeans.jpg',\n      rating: 0,\n      quantity: 0\n    };\n  }\n  createProduct(product) {\n    //headers variable to set request headers\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    //const size = this.getProducts.length;\n    const id = 'P0' + this.size + 1;\n    //newProduct spread across product\n    const newProduct = {\n      ...product,\n      id: id\n    };\n    console.log(`in create method ${this.url}`);\n    //return logic starts here\n    //http .post method\n    //generics method -- IProduct\n    //args --3 url , newProduct ,headers\n    //this.url -- declared in the class outside the functions\n    return this.http.post(this.url, newProduct, {\n      headers\n    }).pipe(tap(data => {\n      console.log('in create new product' + JSON.stringify(data));\n      //pushing the new data new Product to the products array\n      this.products.push(data);\n    }, catchError(this.errorHandler)));\n  }\n  //delete  api/events --- delete mapping api/events/1\n  deleteProduct(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    //@DeleteMapping deleteAll delete url/id  /api/products/111\n    const url = `${this.url}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => {\n      console.log('deleted prd' + id);\n      const foundIndex = this.products.findIndex(item => item.id === id);\n      //if product id is not found means index returned will be -1\n      if (foundIndex > -1) this.products.splice(foundIndex, 1);\n    }, catchError(this.errorHandler)));\n  }\n  //update a product\n  // means two steps -- one when the user selects a particular data from the list and clicks on edit button\n  //you can render a new component ProductEditComponent --form with all the required fields\n  // name price qty\n  //ngOnInit -- it should get the values of the selectedProduct  from the ProductListComponent\n  //in that form , pre fill the data from the db with the selected product\n  //user will modify\n  //user will submit  ,this new product data will be used in http put with the id\n  getProductById(id) {\n    return this.getProducts().pipe(tap(() => {\n      console.log('fetch product' + id);\n      this.foundIndex = this.products.findIndex(item => item.id == id);\n      if (this.foundIndex > -1) {\n        this.products[this.foundIndex];\n      }\n    }), map(() => this.products[this.foundIndex]), catchError(this.errorHandler));\n  }\n  updateProduct(product) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    //put http method\n    const url = `${this.url}/${product.id}`;\n    //logic to call http put method to update the product on the given url\n    return this.http.put(url, product, {\n      headers\n    }).pipe(tap(() => {\n      console.log('update product' + product.id);\n      const foundIndex = this.products.findIndex(item => item.id === product.id);\n      if (foundIndex > -1) {\n        this.products[foundIndex] = product;\n      }\n    }), map(() => product), catchError(this.errorHandler));\n  }\n}\nproductService.ɵfac = function productService_Factory(t) {\n  return new (t || productService)(i0.ɵɵinject(i1.HttpClient));\n};\nproductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: productService,\n  factory: productService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","catchError","map","tap","throwError","Category","productService","constructor","http","selectedProductSource","asObservable","err","errorMessage","error","ErrorEvent","message","status","body","console","log","getProducts","get","url","pipe","data","products","errorHandler","changeSelectedProduct","selectedProduct","next","newProduct","id","name","category","jeans","price","imageUrl","rating","quantity","createProduct","product","headers","size","post","JSON","stringify","push","deleteProduct","delete","foundIndex","findIndex","item","splice","getProductById","updateProduct","put","factory","providedIn"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\shared\\productService.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, catchError, map, Observable, tap, throwError } from \"rxjs\";\r\nimport { Category, IProduct } from \"src/app/products/product\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class productService{\r\n\r\n  foundIndex:number=0;\r\n  //angular DI will resolve the dependency of ProductService class on HttpClient\r\n   //A -- B --C\r\n   //ProductListComponent it has a dependency mentioned in the constructors\r\n   //P roductService --constructor -- it says ProductService has  a dependency of type HttpClient\r\n\r\n   ///api/products --will be resolved from in-memory web api -- /api/products\r\nprivate url=\"api/products\";\r\nproducts:IProduct[]=[];\r\n\r\n//why are we using BehaviorSubject\r\n//BehaviorSubject is a subtype of Observable\r\n//BehaviorSubject --it will emit only the last value of the source observable\r\n//BehaviorSubject will ensure that every consumer get recent most value\r\n//selection --selected object from the list of values\r\nprivate selectedProductSource= new BehaviorSubject<IProduct | null >(null);\r\n\r\n//conventionally you can put $ to the var if it is a Observable\r\nselectedProductChanges$=this.selectedProductSource.asObservable();\r\n\r\n//why are we passing http in the constructor as an argument\r\n//what will angular do here\r\n//angular will inject the httpclient dependency in productservice\r\n//productservice needs to send http requests -- get post put delete\r\n constructor(private http:HttpClient){\r\n   //we a re not writing any code\r\n\r\n }\r\n\r\n //retrieving all the products from api\r\n //method name is getProducts( ) --no args\r\n //what it is returning  ,what is the return type\r\n //return type is mentioned after the method name and a colon\r\n //return type  is Observable<IProduct[]>\r\n\r\n getProducts():Observable<IProduct[]>{\r\n   //what is the logic\r\n   //to get array of IProduct from db\r\n   //get method is a generic method IProduct[]\r\n   //arguments u are passing this.url api/products --- api\r\n   //pipe -- operator in rxjs  where you ca\r\n   return this.http.get<IProduct[]>(this.url).pipe(\r\n\r\n       tap(data=>{console.log(data);\r\n         //we are assigning data to this.products\r\n         this.products=data;\r\n   }),\r\n       catchError(this.errorHandler)\r\n   );\r\n\r\n }\r\n\r\n\r\n\r\nchangeSelectedProduct(selectedProduct:IProduct | null):void{\r\n\r\n this.selectedProductSource.next(selectedProduct);\r\n\r\n}\r\n\r\n //errorhandler which returns the Observable with errorMessage\r\n errorHandler=(err:any)=>{\r\n\r\n  let errorMessage:string;\r\n  //a client side error or network error then ErrorEvent object will be thrown\r\n\r\n  if(err.error instanceof ErrorEvent)\r\n    {\r\n\r\n      errorMessage = `An error has occured ${err.error.message}`\r\n    }\r\n    else{\r\n\r\n     errorMessage =  `Backend error code ${err.status} ${err.body.error}`;\r\n\r\n    }\r\n    console.log(err);\r\n    return throwError(errorMessage);\r\n\r\n\r\n }\r\n\r\n\r\n // a method newProduct which acts like a constructor of creating a new Product\r\n //what is name of the method -- newProduct\r\n //how many args --zero args\r\n //return type IProduct\r\n\r\n newProduct():IProduct{\r\n //logic should focus on sending back a IProduct\r\n   return {\r\n\r\n        id:'P010',\r\n       name:'',\r\n       category:Category.jeans,\r\n       price:0,\r\n       imageUrl:'\\\\assets\\\\images\\\\jeans.jpg',\r\n       rating:0,\r\n       quantity:0\r\n\r\n   };\r\n\r\n }\r\n\r\n\r\n //what ever is in the request body, that is the object of IProduct\r\n //http post request  with the request body and request headers -content type application/json\r\n //url is the collection of events ==  /api/events\r\n\r\n //what is the method name --createProduct\r\n //args -- product of type IProduct\r\n //return Observable<IProduct>\r\nsize=1\r\n createProduct(product:IProduct):Observable<IProduct>{\r\n    //headers variable to set request headers\r\n   const headers= new HttpHeaders({'Content-Type':'application/json'});\r\n   //const size = this.getProducts.length;\r\n   const id ='P0'+this.size+1;\r\n       //newProduct spread across product\r\n     const newProduct={...product,id:id};\r\n   console.log(`in create method ${this.url}`)\r\n\r\n     //return logic starts here\r\n     //http .post method\r\n     //generics method -- IProduct\r\n     //args --3 url , newProduct ,headers\r\n     //this.url -- declared in the class outside the functions\r\n     return     this.http.post<IProduct>(this.url,newProduct,{headers})\r\n     .pipe(\r\n       tap(data=>{\r\n\r\n        console.log('in create new product'+ JSON.stringify(data));\r\n        //pushing the new data new Product to the products array\r\n        this.products.push(data);\r\n\r\n       },\r\n       catchError(this.errorHandler)\r\n       )\r\n     )\r\n }\r\n //delete  api/events --- delete mapping api/events/1\r\n\r\n deleteProduct(id:string):Observable<{}>{\r\n   const headers= new HttpHeaders({'Content-Type':'application/json'});\r\n\r\n   //@DeleteMapping deleteAll delete url/id  /api/products/111\r\n   const url= `${this.url}/${id}`;\r\n\r\n   return this.http.delete<IProduct>(url,{headers})\r\n   .pipe(\r\n     tap(data=>{\r\n       console.log('deleted prd'+id);\r\n      const foundIndex = this.products.findIndex(item=>item.id===id);\r\n      //if product id is not found means index returned will be -1\r\n      if(foundIndex > -1)\r\n      this.products.splice(foundIndex,1);\r\n\r\n\r\n     },\r\n     catchError(this.errorHandler))\r\n\r\n\r\n   );\r\n\r\n\r\n\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n //update a product\r\n // means two steps -- one when the user selects a particular data from the list and clicks on edit button\r\n //you can render a new component ProductEditComponent --form with all the required fields\r\n // name price qty\r\n //ngOnInit -- it should get the values of the selectedProduct  from the ProductListComponent\r\n //in that form , pre fill the data from the db with the selected product\r\n //user will modify\r\n //user will submit  ,this new product data will be used in http put with the id\r\n  getProductById(id:string):Observable<IProduct>{\r\n   return this.getProducts().pipe(\r\n     tap(()=>{console.log('fetch product'+id);\r\n      this.foundIndex =this.products.findIndex(item=>item.id ==id);\r\n     if(this.foundIndex > -1){\r\n       this.products[this.foundIndex];\r\n         }\r\n     }),\r\n     map(()=>this.products[this.foundIndex]),\r\n     catchError(this.errorHandler)\r\n     );\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n  updateProduct(product:IProduct):Observable<IProduct>{\r\n   const headers= new HttpHeaders({'Content-Type':'application/json'});\r\n\r\n   //put http method\r\n   const url= `${this.url}/${product.id}`;\r\n\r\n   //logic to call http put method to update the product on the given url\r\n   return this.http.put<IProduct>(url,product, {headers}).pipe(\r\n\r\n   tap(()=>{console.log('update product'+product.id);\r\n   const foundIndex =this.products.findIndex(item=>item.id === product.id);\r\n   if(foundIndex > -1){\r\n     this.products[foundIndex]=product;\r\n       }\r\n   }),\r\n   map(()=>product),\r\n   catchError(this.errorHandler)\r\n   );\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n        \r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}