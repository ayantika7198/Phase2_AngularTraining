{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { BehaviorSubject, catchError, map, tap, throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlowerService {\n  constructor(http) {\n    this.http = http;\n    this.foundIndex = 0;\n    this.url = \"api/flowers\";\n    this.flowers = [];\n    this.selectedFlowerSource = new BehaviorSubject(null);\n    this.selectedFlowerChanges$ = this.selectedFlowerSource.asObservable();\n    this.errorHandler = err => {\n      let errorMessage;\n      if (err.error instanceof ErrorEvent) {\n        errorMessage = `An error has occured ${err.error.message}`;\n      } else {\n        errorMessage = `Backend error code ${err.status} ${err.body.error}`;\n      }\n      console.log(err);\n      return throwError(errorMessage);\n    };\n  }\n  getFlowers() {\n    return this.http.get(this.url).pipe(tap(data => {\n      this.flowers = data;\n    }), catchError(this.errorHandler));\n  }\n  changeSelectedFlower(selectedFlower) {\n    this.selectedFlowerSource.next(selectedFlower);\n  }\n  newFlower() {\n    return {\n      \"id\": '',\n      \"name\": 'Flower',\n      \"place\": 'Kolkata',\n      \"image\": \"\\\\assets\\\\images\\\\rose.jpg\",\n      \"price\": 200,\n      \"quantity\": 0\n    };\n  }\n  createFlower(flower) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const newFlower = {\n      ...flower\n    };\n    return this.http.post(this.url, newFlower, {\n      headers\n    }).pipe(tap(data => {\n      this.flowers.push(data);\n    }, catchError(this.errorHandler)));\n  }\n  deleteFlower(id) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.url}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => {\n      const foundIndex = this.flowers.findIndex(item => item.id === id);\n      if (foundIndex > -1) this.flowers.splice(foundIndex, 1);\n    }, catchError(this.errorHandler)));\n  }\n  updateFlower(flower) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    const url = `${this.url}/${flower.id}`;\n    return this.http.put(url, flower, {\n      headers\n    }).pipe(tap(() => {\n      const foundIndex = this.flowers.findIndex(item => item.id === flower.id);\n      if (foundIndex > -1) {\n        this.flowers[foundIndex] = flower;\n      }\n    }), map(() => flower), catchError(this.errorHandler));\n  }\n}\nFlowerService.ɵfac = function FlowerService_Factory(t) {\n  return new (t || FlowerService)(i0.ɵɵinject(i1.HttpClient));\n};\nFlowerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlowerService,\n  factory: FlowerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","BehaviorSubject","catchError","map","tap","throwError","FlowerService","constructor","http","selectedFlowerSource","asObservable","err","errorMessage","error","ErrorEvent","message","status","body","console","log","getFlowers","get","url","pipe","data","flowers","errorHandler","changeSelectedFlower","selectedFlower","next","newFlower","createFlower","flower","headers","post","push","deleteFlower","id","delete","foundIndex","findIndex","item","splice","updateFlower","put","factory","providedIn"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\shared\\flower.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, catchError, map, Observable, tap, throwError } from \"rxjs\";\r\nimport { IFlower } from \"src/app/flowers/flower\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n\r\nexport class FlowerService{\r\n\r\n    foundIndex:number=0;\r\n     url=\"api/flowers\";\r\n    flowers:IFlower[]=[];\r\n\r\n    private selectedFlowerSource= new BehaviorSubject<IFlower | null >(null);\r\n\r\n    selectedFlowerChanges$=this.selectedFlowerSource.asObservable();\r\n\r\n    constructor(private http:HttpClient){}\r\n\r\n    getFlowers():Observable<IFlower[]>{\r\n        return this.http.get<IFlower[]>(this.url).pipe(\r\n            tap(data=>{\r\n                this.flowers=data;\r\n            }),\r\n            catchError(this.errorHandler)\r\n        );\r\n    }\r\n\r\n    errorHandler=(err:any)=>{\r\n        let errorMessage:string;\r\n\r\n        if(err.error instanceof ErrorEvent)\r\n     {\r\n\r\n       errorMessage = `An error has occured ${err.error.message}`\r\n     }\r\n     else{\r\n\r\n      errorMessage =  `Backend error code ${err.status} ${err.body.error}`;\r\n\r\n     }\r\n     console.log(err);\r\n     return throwError(errorMessage);\r\n    }\r\n\r\n    changeSelectedFlower(selectedFlower:IFlower | null):void{\r\n        this.selectedFlowerSource.next(selectedFlower);\r\n    }\r\n\r\n    newFlower():IFlower{\r\n        return{\r\n            \"id\":'',\r\n            \"name\":'Flower',\r\n            \"place\":'Kolkata',\r\n            \"image\":\"\\\\assets\\\\images\\\\rose.jpg\",\r\n            \"price\":200,\r\n            \"quantity\":0\r\n        };\r\n    }\r\n\r\n    createFlower(flower:IFlower):Observable<IFlower>{\r\n        const headers= new HttpHeaders({'Content-Type':'application/json'});\r\n\r\n        const newFlower={...flower};\r\n\r\n        return this.http.post<IFlower>(this.url,newFlower,{headers}).pipe(\r\n            tap(data=>{\r\n                this.flowers.push(data);\r\n            },\r\n            catchError(this.errorHandler)\r\n            )\r\n        )\r\n    }\r\n\r\n    deleteFlower(id:string):Observable<{}>{\r\n        const headers= new HttpHeaders({'Content-Type':'application/json'});\r\n        const url= `${this.url}/${id}`;\r\n\r\n        return this.http.delete<IFlower>(url,{headers}).pipe(\r\n            tap(data=>{\r\n                const foundIndex = this.flowers.findIndex(item=>item.id===id);\r\n\r\n                if(foundIndex > -1)\r\n                    this.flowers.splice(foundIndex,1);\r\n            },\r\n                catchError(this.errorHandler)\r\n            )\r\n\r\n        );\r\n    }\r\n\r\n    updateFlower(flower:IFlower):Observable<IFlower>{\r\n        const headers= new HttpHeaders({'Content-Type':'application/json'});\r\n\r\n        const url= `${this.url}/${flower.id}`;\r\n\r\n        return this.http.put<IFlower>(url,flower,{headers}).pipe(\r\n            tap(()=>{\r\n                const foundIndex =this.flowers.findIndex(item=>item.id === flower.id);\r\n            if(foundIndex > -1){\r\n                this.flowers[foundIndex]=flower;\r\n        }\r\n            }),\r\n            map(()=>flower),\r\n            catchError(this.errorHandler)\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}