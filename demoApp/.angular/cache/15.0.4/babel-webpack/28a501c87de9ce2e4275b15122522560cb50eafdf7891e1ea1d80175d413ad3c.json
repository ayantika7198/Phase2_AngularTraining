{"ast":null,"code":"import { FormGroup } from \"@angular/forms\";\nexport class GenericValidator {\n  constructor(validationMessages) {\n    this.validationMessages = validationMessages;\n  }\n  //process each control in formgroup\n  //and it should return a set of validation error messages\n  processMessages(container) {\n    const messages = {};\n    //if the form group has nested form group or is it control\n    //ngIf on the form\n    //where we are checking the Form Group --controls or does it have FormGroup\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey];\n        // If it is a FormGroup, process its child controls.\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map(messageKey => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n    return messages;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,gBAAgB;AAE1C,OAAM,MAAOC,gBAAgB;EAE5BC,YAAoBC,kBAAyD;IAAzD,uBAAkB,GAAlBA,kBAAkB;EAAyC;EAChF;EACA;EACGC,eAAe,CAACC,SAAmB;IAElC,MAAMC,QAAQ,GAAK,EAAE;IACrB;IACA;IACA;IACA,KAAK,MAAMC,UAAU,IAAIF,SAAS,CAACG,QAAQ,EAAE;MACzC,IAAIH,SAAS,CAACG,QAAQ,CAACC,cAAc,CAACF,UAAU,CAAC,EAAE;QACjD,MAAMG,CAAC,GAAGL,SAAS,CAACG,QAAQ,CAACD,UAAU,CAAC;QACxC;QACA,IAAIG,CAAC,YAAYV,SAAS,EAAE;UAC1B,MAAMW,aAAa,GAAG,IAAI,CAACP,eAAe,CAACM,CAAC,CAAC;UAC7CE,MAAM,CAACC,MAAM,CAACP,QAAQ,EAAEK,aAAa,CAAC;SACvC,MAAM;UACL;UACA,IAAI,IAAI,CAACR,kBAAkB,CAACI,UAAU,CAAC,EAAE;YACvCD,QAAQ,CAACC,UAAU,CAAC,GAAG,EAAE;YACzB,IAAI,CAACG,CAAC,CAACI,KAAK,IAAIJ,CAAC,CAACK,OAAO,KAAKL,CAAC,CAACM,MAAM,EAAE;cACtCJ,MAAM,CAACK,IAAI,CAACP,CAAC,CAACM,MAAM,CAAC,CAACE,GAAG,CAACC,UAAU,IAAG;gBACrC,IAAI,IAAI,CAAChB,kBAAkB,CAACI,UAAU,CAAC,CAACY,UAAU,CAAC,EAAE;kBACnDb,QAAQ,CAACC,UAAU,CAAC,IAAI,IAAI,CAACJ,kBAAkB,CAACI,UAAU,CAAC,CAACY,UAAU,CAAC,GAAG,GAAG;;cAEjF,CAAC,CAAC;;;;;;IAOd,OAAOb,QAAQ;EAChB","names":["FormGroup","GenericValidator","constructor","validationMessages","processMessages","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","Object","assign","dirty","touched","errors","keys","map","messageKey"],"sourceRoot":"","sources":["D:\\Phase2\\demoApp\\src\\app\\shared\\GenericValidator.ts"],"sourcesContent":["import { FormGroup } from \"@angular/forms\";\r\n\r\nexport class GenericValidator{\r\n\r\n constructor(private validationMessages : {[key:string]:{[key:string]:string}}){}\r\n//process each control in formgroup\r\n//and it should return a set of validation error messages\r\n   processMessages(container:FormGroup):{[key:string]:string}{\r\n\r\n    const messages:any={};\r\n    //if the form group has nested form group or is it control\r\n    //ngIf on the form\r\n    //where we are checking the Form Group --controls or does it have FormGroup\r\n    for (const controlKey in container.controls) {\r\n        if (container.controls.hasOwnProperty(controlKey)) {\r\n          const c = container.controls[controlKey];\r\n          // If it is a FormGroup, process its child controls.\r\n          if (c instanceof FormGroup) {\r\n            const childMessages = this.processMessages(c);\r\n            Object.assign(messages, childMessages);\r\n          } else {\r\n            // Only validate if there are validation messages for the control\r\n            if (this.validationMessages[controlKey]) {\r\n              messages[controlKey] = '';\r\n              if ((c.dirty || c.touched) && c.errors) {\r\n                Object.keys(c.errors).map(messageKey => {\r\n                  if (this.validationMessages[controlKey][messageKey]) {\r\n                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\r\n                  }\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n    return messages;\r\n   }\r\n\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}